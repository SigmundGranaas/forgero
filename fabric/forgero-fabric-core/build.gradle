dependencies {
	api project(':forgero-core')
	api project(path: ':fabric:modules:generator', configuration: 'namedElements')
	api project(path: ':fabric:minecraft-common', configuration: 'namedElements')

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation("maven.modrinth:arrp:${project.aarp_version}")
	include("maven.modrinth:arrp:${project.aarp_version}")

	localRuntime project(':content:forgero-vanilla')
	localRuntime project(':content:forgero-extended')
	localRuntime project(':content:forgero-compat')
	localRuntime project(':content:forgero-structures')

	localRuntime project(path: ':fabric:modules:bows', configuration: 'namedElements')
}

sourceSets {
	test {
		compileClasspath += test.compileClasspath
		runtimeClasspath += test.runtimeClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

loom {
	accessWidenerPath = file("src/main/resources/forgero-core.accesswidener")

	runs {
		testServer {
			server()
			ideConfigGenerated project.rootProject == project
			name = "Test Server"
			source sourceSets.test
		}
		gametest {
			inherit testServer
			name "Game Test"
			// Enable the gametest runner
			vmArg "-Dfabric-api.gametest"
			vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
			runDir "build/gametest"
		}
		testClient {
			client()
			name = "Test Client"
			vmArg "-Dfabric-api.gametest.structures.output-dir=${file("src/test/resources/data/forgero/gametest/structures")}"

			ideConfigGenerated = false
			source sourceSets.test
		}
	}
}


test {
	useJUnitPlatform()
	maxParallelForks = 32
	testLogging.events("failed")
	testLogging.info.events = ["failed", "skipped"]
}
