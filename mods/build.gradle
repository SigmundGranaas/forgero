//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck
//file:noinspection DependencyNotationArgument

plugins {
	id "architectury-plugin" version "${architectury_plugin_version}"
	id "dev.architectury.loom" version "${architectury_loom_version}" apply false
}

architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "architectury-plugin"
	apply plugin: "dev.architectury.loom"
	apply plugin: "com.github.johnrengelman.shadow"

	base {
		archivesName = "${rootProject.mod_id}-${project.name}"
	}

	dependencies {
		api(project(":core"))

		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

		compileOnly("net.fabricmc:sponge-mixin:${project.mixin_version}")
	}

	java {
		withSourcesJar()
	}

	sourceSets {
		test {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	if (project.name.contains("common")) {
		architectury {
			common(rootProject.enabled_platforms.split(","))
		}
	} else if (project.name.contains("fabric")) {
		architectury {
			platformSetupLoomIde()
			fabric()
		}

		configurations {
			common
			shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files
			compileClasspath.extendsFrom common
			runtimeClasspath.extendsFrom common
			developmentFabric.extendsFrom common
		}

		def commonSubProjectPath = "${project.getParent().getPath()}:${project.getParent().getName()}-common"
		dependencies {
			common(project(path: commonSubProjectPath, configuration: "namedElements")) { transitive false }
			shadowCommon(project(path: commonSubProjectPath, configuration: "transformProductionFabric")) { transitive false }
		}

		def commonSubProject = project(commonSubProjectPath)
		processResources {
			inputs.property "version", rootProject.version

			from(commonSubProject.sourceSets["main"].resources) {
				include("assets", "data", "resourcepacks")
			}

			filesMatching("fabric.mod.json") {
				expand "version": project.version,
					"base_mod_id": rootProject.mod_id,
					"mod_id": project.mod_id,
					"mod_name": project.mod_name,
					"mod_description": project.mod_description,
					"mod_license": project.mod_license,
					"fabric_loader_version": project.fabric_loader_version,
					"java_version": project.java_version,
					"supported_minecraft_version": project.supported_minecraft_version
			}
		}

		shadowJar {
			exclude "architectury.common.json"

			configurations = [project.configurations.shadowCommon]
			archiveClassifier = "dev-shadow"
		}

		remapJar {
			inputFile.set shadowJar.archiveFile
			dependsOn shadowJar
		}

		sourcesJar {
			def commonSources = commonSubProject.sourcesJar
			dependsOn commonSources
			from commonSources.archiveFile.map { zipTree(it) }
		}

		components.java {
			withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
				skip()
			}
		}
	}
}
