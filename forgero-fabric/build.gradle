plugins {
    id "idea"
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}
artifacts {
    dev jar
}

dependencies {
    implementation project(':forgero-core')
    implementation project(':forgero-vanilla')
    implementation project(':forgero-extended')
    implementation project(':forgero-structures')
    implementation project(':forgero-compat')
    implementation project(path: ':minecraft-common', configuration: 'dev')

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
    annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "curse.maven:arrp-463113:3901211"
    include "curse.maven:arrp-463113:3901211"
    include project(':forgero-core')
    include project(':minecraft-common')
}

task assembleComplete(type: Jar) {
    group = "build"

    loom {
        mixin {
            defaultRefmapName = "forgero-fabric-refmap.json"
        }
    }

    remapJar {
        if (gradle.startParameter.taskNames.stream().anyMatch("assembleComplete"::equals)) {
            dependencies {
                include project(':forgero-vanilla')
                include project(':forgero-extended')
                include project(':forgero-compat')
                include project(':forgero-structures')
                include project(':forgero-fabric-compat')
            }
        }

    }

    jar {
        if (gradle.startParameter.taskNames.stream().anyMatch("assembleComplete"::equals)) {
            archivesBaseName = "${archivesBaseName}-full"
        }
    }
    finalizedBy(assemble)
}

processResources {
    inputs.property "version", rootProject.version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // add all the jars that should be included when publishing to maven

        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/sigmundgranaas/forgero"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


curseforge {
    apiKey = System.getenv("CurseForgeApiKey") ?: ""
    project {
        id = '581435'
        changelogType = "markdown"
        changelog = file('changelog.md')

        releaseType = 'release'
        addGameVersion project.minecraft_version
        addGameVersion 'Fabric'
        addGameVersion "Java 17"

        mainArtifact(remapJar) {
            displayName = "Forgero [Fabric]: $rootProject.version"
            relations {
                embeddedLibrary 'arrp'
                requiredDependency 'fabric-api'
                optionalDependency 'patchouli'
            }
        }
    }
    options {
        forgeGradleIntegration = false // defaults to true
    }
}

sourceSets {
    forgero {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        clientExtended {
            dependencies {
                implementation project(':forgero-vanilla')
                implementation project(':forgero-extended')
                implementation project(':forgero-structures')
                implementation project(':forgero-compat')
            }
            client()
        }
        clientVanilla {
            dependencies {
                implementation project(':forgero-vanilla')
            }
            client()
        }

        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.test
        }
        gametest {
            inherit testmodServer

            name "Game Test"


            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
        autoTestServer {
            inherit testmodServer

            name "Auto Test Server"
            vmArg "-Dfabric.autoTest"
        }

        gametestClient {
            inherit testmodServer
            client()

            name "test client"
            //vmArg "-Dfabric.autoTest"
        }
    }
}