//disabling forge for now
//plugins {
//    id "idea"
//    id 'dev.architectury.loom' apply true
//    id 'maven-publish'
//    id 'com.matthewprenger.cursegradle' version '1.4.0'
//}
//
//loom {
//    // use this if you are using the official mojang mappings
//    // and want loom to stop warning you about their license
//    //silentMojangMappingsLicense()
//
//    // since loom 0.10, you are **required** to use the
//    // "forge" block to configure forge-specific features,
//    // such as the mixinConfigs array or datagen
//    forge {
//        // specify the mixin configs used in this mod
//        // this will be added to the jar manifest as well!
//        mixinConfigs = [
//                "forgero.mixins.json"
//        ]
//
//        // missing access transformers?
//        // don't worry, you can still use them!
//        // note that your AT *MUST* be located at
//        // src/main/resources/META-INF/accesstransformer.cfg
//        // to work as there is currently no config option to change this.
//        // also, any names used in your access transformer will need to be
//        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
//        // (both of these things may be subject to change in the future)
//
//    }
//
//    // This allows you to modify your launch configurations,
//    // for example to add custom arguments. In this case, we want
//    // the data generator to check our resources directory for
//    // existing files. (see Forge's ExistingFileHelper for more info)
////    launches {
////        data {
////            arg "--existing", file("src/main/resources").absolutePath
////        }
////    }
//}
//
//dependencies {
//    annotationProcessor 'org.projectlombok:lombok:1.18.24'
//    implementation 'org.jetbrains:annotations:23.0.0'
//    implementation 'org.projectlombok:lombok:1.18.24'
//    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
//    // To change the versions see the gradle.properties file
//
//    minecraft "com.mojang:minecraft:${project.minecraft_version}"
//    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
//    forge "net.minecraftforge:forge:${project.forge_version}"
//
//    include project(':forgero-core')
//    include project(':forgero-vanilla')
//
//    api project(':forgero-core')
//    implementation project(':forgero-vanilla')
//    //compileOnlyApi project(path: ':minecraft-common', configuration: 'dev')
//
//    runtimeOnly forgeRuntimeLibrary(project(':forgero-vanilla'))
//    runtimeOnly forgeRuntimeLibrary(project(':forgero-core'))
//    //modImplementation forgeDependencies(project(':minecraft-common'))
//}
//
//processResources {
//    // define properties that can be used during resource processing
//    inputs.property "version", project.version
//
//    // this will replace the property "${version}" in your mods.toml
//    // with the version you've defined in your gradle.properties
//    filesMatching("META-INF/mods.toml") {
//        expand "version": project.version
//    }
//}
//
//tasks.withType(JavaCompile) {
//    // ensure that the encoding is set to UTF-8, no matter what the system default is
//    // this fixes some edge cases with special characters not displaying correctly
//    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
//    // If Javadoc is generated, this must be specified in that task too.
//    options.encoding = "UTF-8"
//}
//
//java {
//    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//    // if it is present.
//    // If you remove this line, sources will not be generated.
//    //withSourcesJar()
//}
//
//jar {
//    // add some additional metadata to the jar manifest
//    manifest {
//        attributes([
//                "Specification-Title"     : project.mod_id,
//                "Specification-Vendor"    : project.mod_author,
//                "Specification-Version"   : "1",
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : project.version,
//                "Implementation-Vendor"   : project.mod_author,
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}